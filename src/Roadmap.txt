

SYNC REMAINING TODOS:

Server:
[ ] Handle prop from client (SyncEvent.java)
  [ ] Save prop in DB (QUERY saveNote saveNoteProp)
  [ ] Relay to all active clients (QUERY noteVisibleToPersonFromEye)
[ ] Handle eye from client
  [ ] Save on in-memory client object (QUERY getPerson getClient) (Client.java)
  [ ] Send changed notes (QUERY changesUnderNoteForClientToken)
[ ] Send prop to client (SyncEvent.java)
  [ ] Save client seen prop (QUERY setPropSeenByClient)

Client:
[ ] Handle prop from server
  [ ] Handle when client version is "synchronized"
    [ ] Overwrite
    [ ] Set synchronized
  [ ] Handle when client version is not "synchronized"
    [ ] Show conflict dialog
    [ ] Send resolution to server
      [ ] Server sends to client
[ ] Send eye to server on every eye change
[ ] Router: Change URL on eye change
  [ ] Load from local
  [ ] Create transient blank note if not found
  [ ] Load from server (see: "Send eye on every eye change")

People:
[ ] Save village person

Next Todo:

[ ] Collaboration ticker
[ ] Click note in ticker to view
[ ] Visibility
[ ] URLs
[ ] Set visible to me on save server-side
[ ] Conflict resolution
[ ] Send client notes updated since last checkin
[ ] Email


 -> Does any note that I own point to this note? Then I have access!

ClientNotePropSyncState {
  notePropId,
  clientToken,
  lastSyncTime
}

NoteProps {
  noteId,
  propName,
  lastUpdated
}

Note {
  <props>
}



QUERIES
=======

### Set Eye Query

Sample data:
{
	"note": "entities/42564108",
	"person": "entities/42564381",
	"client": "entities/42564430"
}

let visible = append(
    (FOR note IN entities FILTER note._id == @note RETURN note),
    (FOR entity, rel IN 1..2 OUTBOUND @note GRAPH "graph"
        FILTER (rel.kind == 'item' OR rel.kind == 'ref' OR (rel.kind == 'person' AND entity == @person))
        RETURN entity
    )
)

for note in visible return [
    note._key,
    (FOR prop IN entities FILTER prop.note == note._id AND (
        FOR syncProp, sync IN OUTBOUND @client GRAPH "state" FILTER syncProp == prop RETURN sync
    )[0].version != prop.version RETURN [
        prop.type,
        prop.value
    ])
]




### Is Visible To Client Eye

Sample data:
{
	"note": "entities/42564672",
	"eye": "entities/42564108"
}

let visible = (FOR entity, rel IN 1..2 OUTBOUND @eye GRAPH "graph"
  FILTER (rel.kind == 'item' OR rel.kind == 'ref')
  RETURN entity._id
)

return @note in visible


### Is Visible To Person

## @person The person to test visibility to
## @note The note to test visibility to

let visible = (
    FOR entity, rel IN 1..10 INBOUND @note GRAPH 'graph'
        FOR person, rel2 IN OUTBOUND entity GRAPH 'graph'
            FILTER (rel.kind == 'item' OR rel.kind == 'ref' OR (rel.kind == 'person' AND person._id == @person))
            FILTER rel2.kind == 'person' AND person._id == @person
            RETURN true
)

return visible[0] == true




Collab How-To
===============

ClientMapOfNotes

note -> prop -> rev

onClientEyeChange:

for all props in current note
  check if client has been sent current version
    if not, send
      repeat for all ref(1 deep), item(3 deep)
        send compiled event

note {
  id, color, name, ref, items
}

syncstate {
  noteId, prop, clientToken, version
}


if i can see current note
FOR note IN Notes FILTER (
  is or is child of current note depth 3
  syncstate(currentClientToken, note) exists AND // have access?
  syncstate(currentClientToken, note, prop) != currentNotePropRevision // out of date?
) RETURN note


Collab Frontend
===============

Access Rules

Note: Visible
Reference: Visible if reference target is visible
Item: Always visible
Parent: Visible if parent is visible



Collab Backend
==============

Models:
Group <id, people>
Person <id, token, vlllageToken>
Client <>
Note <>


A -> B (mai,bun) -> C -> D -> E (yum) -> F {mai,bun,yum}

A.group = null
B.group = mb94kg
C.group = null
D.group = null
E.group = yodk35
F.group = null

No deep searches for access group (Cached + updated locally)
No changes to other notes when moving or changing a parent
No changes to other notes when adding or removing groups to parent notes

Sync
====


Client -> Server

-> sync {me: '12345...128', timestamp: 'E-TAG'}
-> sync [{id: , field: }, {id: , field: }, ...]

Client <- Server

<- sync {me: '12345...128', timestamp: 'E-TAG', notes: [{note}, {note}, ...]}
<- sync [{id: , field: }, {id: , field: }, ...]





Vlllage Sync MVP (Zero-to-One)
==============================

Right click -> Connect to Village...

VlllageInceptionNotesToken is grabbed from Village Store

If no VlllageInceptionNotesToken is found, create and store token in Village Store

Store VlllageInceptionNotesToken in localStorage

Connect to wss://sync.inceptionnotes.com/ws

send state event with VlllageInceptionNotesToken

receive state event

--- Zero-to-One completed ---



Notes
=====

Server is there for the client (heavy client)

Debounce server-sync every 5s (i.e. not every character press)
If window closed while not saved, notify with system alert

Notes client-side are marked dirty as in not-sent
THESE NOTES are sent to the server on forst possibility

All merging happens client-side


Merge
=====

resolve: {
  [{id: }, {id: }]
}



Events (Push Notification \ Email)
====

Jacob shared a note with you[ and 3 others]
Jacob updated 12 notes
Jacob added Nate Ferrero to "Some Note"


















Server
======

sync.inceptionnotes.com

API
===

Catch Up

{
  all: {
    dirty: true,
    since: 'date'
  }
}



Edits

{
  'state': { 'id': '1231321312', background: '3232' }
}

{
  'state': { 'id': '1231321312', background: '3232' }
}

People

{
  'add': { 'id': '12121212', people: ['32232323'] }
}

{
  'remove': { 'id': '12121212', people: ['32232323'] }
}